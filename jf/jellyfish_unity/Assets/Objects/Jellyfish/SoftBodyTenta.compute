// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel main
#pragma kernel init

#define NOISE_SIMPLEX_1_DIV_289 0.00346020761245674740484429065744f
float permute(float x) { return fmod(x * x * 34.0 + x, 289.0); }
float3 permute(float3 x) { return fmod(x * x * 34.0 + x, 289.0); }
float4 permute(float4 x) { return fmod(x * x * 34.0 + x, 289.0); }
float taylorInvSqrt(float r) { return 1.79284291400159 - 0.85373472095314 * r; }
float4 taylorInvSqrt(float4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

float4 grad4(float j, float4 ip)
{
    const float4 ones = float4(1.0, 1.0, 1.0, -1.0);
    float4 p, s;
    p.xyz = floor(frac(j * ip.xyz) * 7.0) * ip.z - 1.0;
    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
    p.xyz -= sign(p.xyz) * (p.w < 0);
    return p;
}

float snoise(float2 v)
{
    const float4 C = float4(
        0.211324865405187, // (3.0-sqrt(3.0))/6.0
        0.366025403784439, // 0.5*(sqrt(3.0)-1.0)
        -0.577350269189626, // -1.0 + 2.0 * C.x
        0.024390243902439 // 1.0 / 41.0
    );
    // First corner
    float2 i = floor(v + dot(v, C.yy));
    float2 x0 = v - i + dot(i, C.xx);
    float4 x12 = x0.xyxy + C.xxzz;
    int2 i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
    x12.xy -= i1;
    // Permutations
    i = fmod(i, 289.0); // Avoid truncation effects in permutation
    float3 p = permute(
        permute(i.y + float3(0.0, i1.y, 1.0)) + i.x + float3(0.0, i1.x, 1.0)
    );
    float3 m = max(
        0.5 - float3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)),
        0.0
    );
    m = m * m;
    m = m * m;
    float3 x = 2.0 * frac(p * C.www) - 1.0;
    float3 h = abs(x) - 0.5;
    float3 ox = floor(x + 0.5);
    float3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
    float3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

float snoise(float3 v)
{
    const float2 C = float2(0.166666666666666667, 0.333333333333333333);
    const float4 D = float4(0.0, 0.5, 1.0, 2.0);
    // First corner
    float3 i = floor(v + dot(v, C.yyy));
    float3 x0 = v - i + dot(i, C.xxx);
    // Other corners
    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);
    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
    float3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y
    // Permutations
    i = fmod(i, 289.0);
    float4 p = permute(
        permute(permute(i.z + float4(0.0, i1.z, i2.z, 1.0))
            + i.y + float4(0.0, i1.y, i2.y, 1.0))
        + i.x + float4(0.0, i1.x, i2.x, 1.0)
    );
    float n_ = 0.142857142857; // 1/7
    float3 ns = n_ * D.wyz - D.xzx;
    float4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)
    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_); // mod(j,N)
    float4 x = x_ * ns.x + ns.yyyy;
    float4 y = y_ * ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);
    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);
    float4 s0 = floor(b0) * 2.0 + 1.0;
    float4 s1 = floor(b1) * 2.0 + 1.0;
    float4 sh = -step(h, 0.0);
    float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
    float3 p0 = float3(a0.xy, h.x);
    float3 p1 = float3(a0.zw, h.y);
    float3 p2 = float3(a1.xy, h.z);
    float3 p3 = float3(a1.zw, h.w);
    //Normalise gradients
    float4 norm = taylorInvSqrt(float4(
        dot(p0, p0),
        dot(p1, p1),
        dot(p2, p2),
        dot(p3, p3)
    ));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    // Mix final noise value
    float4 m = max(
        0.6 - float4(
            dot(x0, x0),
            dot(x1, x1),
            dot(x2, x2),
            dot(x3, x3)
        ),
        0.0
    );
    m = m * m;
    return 42.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));
}


float4 qmul(float4 q1, float4 q2)
{
    return float4(
        q2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),
        q1.w * q2.w - dot(q1.xyz, q2.xyz)
    );
}

float3 rotate_vector(float3 v, float4 r)
{
    float4 r_c = r * float4(-1, -1, -1, 1);
    return qmul(r, qmul(float4(v, 0), r_c)).xyz;
}



#define segments 128
#define total_length 24.f
#define points_distance (total_length/segments)
#define PI 3.14159265358979311599796346854

struct TentaPoint
{
    float3 velocity;
    float3 target_position;
};


struct TentaOptions
{
    int num_strands;
    float time_step;
    
    float3 origin;
    float4 rotation;
    
    float3 global_force;
    
    float2 noise_scale;
    float noise_strength;
    
    float tension_strength;
    
    float velocity_decay;
    float width;
    float time;

    float shape;
};

RWStructuredBuffer<TentaPoint> tenta_points;
StructuredBuffer<TentaOptions> tenta_options;

uint get_index(uint3 id)
{
    return id.x + segments * id.y;
}

float3 default_pos(uint3 id)
{
    const float theta = 360 * (float)id.y / tenta_options[0].num_strands;
    const float3 round = float3(
        sin(theta) * tenta_options[0].width, // can we do without trigonmeteric funcs?
        points_distance * -1 * (float)id.x,
        cos(theta) * tenta_options[0].width
    );
    const float3 flat = float3(
        ((float)id.y - ((float)tenta_options[0].num_strands / 2.0f) ) * tenta_options[0].width,
        points_distance * -1 * (float)id.x,
        0
    );
    const float3 pos = lerp(round, flat, tenta_options[0].shape);
    return rotate_vector(pos, tenta_options[0].rotation);
}

[numthreads(64, 1, 1)]
void init(uint3 id : SV_DispatchThreadID)
{
    //tenta_points[get_index(id)].final_position = default_pos(id) + tenta_options[0].origin;
    tenta_points[get_index(id)].target_position = default_pos(id) + tenta_options[0].origin;
    tenta_points[get_index(id)].velocity = float3(0.f, 0.f, 0.f);
    //tenta_points[get_index(id)].final_position_delta = float3(0.f, 0.f, 0.f);
}

float3 distance_up(uint3 id, int n = 1)
{
    return tenta_points[get_index(id + uint3(n, 0, 0))].target_position - tenta_points[get_index(id)].target_position;
}

float3 distance_down(uint3 id, int n = 1)
{
    return tenta_points[get_index(id - uint3(n, 0, 0))].target_position - tenta_points[get_index(id)].target_position;
}


float3 tension_with(const float3 distance, int n = 1)
{
    const float offset_from_rest = (points_distance * n) - length(distance);
    return normalize(distance) * -offset_from_rest;
}

float3 apply_tension(const uint3 id)
{
    float3 force = float3(0, 0, 0);

    for (int seg = 1; seg <= 30; ++seg)
    {
        if ((int)id.x + seg < (segments - 1))
        {
            force += tension_with(distance_up(id, seg), seg) * (1.f / (seg));
        }
    }
    for (int seg2 = 1; seg2 <= 30; ++seg2)
    {
        if ((int)id.x - seg2 >= 0)
        {
            force += tension_with(distance_down(id, seg2), seg2) * (1.f / (seg2));
        }
    }
    return force;
}


float3 apply_noise(const uint3 id)
{
    const int tid = get_index(id);
    float3 t = float3(
        snoise(
            float2(
                tenta_points[tid].target_position.x * tenta_options[0].noise_scale.x,
                tenta_points[tid].target_position.y * tenta_options[0].noise_scale.y + tenta_options[0].time
            )
        ),
        0.0f,
        snoise(
            float2(
                tenta_points[tid].target_position.z * tenta_options[0].noise_scale.x,
                tenta_points[tid].target_position.y * tenta_options[0].noise_scale.y + tenta_options[0].time
            )
        )
    );
    return rotate_vector(t, tenta_options[0].rotation);
}



float3 clamp_vec(float f, float3 v)
{
    const float l = length(v);
    if (l > f)
    {
        return (v / l) * f;
    }
    else
    {
        return v;
    }
}

[numthreads(64, 1, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
    const int tid = get_index(id);
    if (id.x == 0)
    {
        const float3 new_pos = default_pos(id) + tenta_options[0].origin;
        tenta_points[tid].velocity = new_pos - tenta_points[get_index(id)].target_position;
        tenta_points[tid].target_position = new_pos;
    }
    else
    {
        float3 force = apply_noise(id) * tenta_options[0].noise_strength;
        force += apply_tension(id) * tenta_options[0].tension_strength;
        force += tenta_options[0].global_force;

        force = clamp_vec(500 * tenta_options[0].time_step, force * tenta_options[0].time_step);

        tenta_points[tid].velocity *= tenta_options[0].velocity_decay; 
        tenta_points[tid].velocity += force;
        tenta_points[tid].velocity = clamp_vec(500 * tenta_options[0].time_step, tenta_points[tid].velocity);

        tenta_points[tid].target_position += tenta_points[tid].velocity;
    }
}
